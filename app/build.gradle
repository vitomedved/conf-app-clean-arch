import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

buildscript {

    repositories {
        jcenter()
    }
}

static def getDate() {
    return new SimpleDateFormat("dd.MM.yyyy").format(new Date())
}

def TYPE_STRING = "String"

android {

    compileSdkVersion $compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {

        applicationId 'com.android.conferenceapp'

        minSdkVersion $minSdkVersion
        targetSdkVersion $targetSdkVersion

        versionCode 1
        versionName '1.0'

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

        buildConfigField TYPE_STRING, "VERSION_DATE", "\"${getDate()}\""

        multiDexEnabled true
    }

    buildTypes {

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            // TODO Release builds should not be signed with debug credentials.
            signingConfig signingConfigs.debug
        }

        debug {
            applicationIdSuffix = ".debug"

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.debug
        }
    }

    signingConfigs {

        debug {
            keyAlias 'debug'
            keyPassword '00000000'
            storeFile file('keystore/debug-keystore.jks')
            storePassword '00000000'
        }
    }

    def FLAVOR_DIMENSION_ENVIRONMENT = "enviroment"

    flavorDimensions FLAVOR_DIMENSION_ENVIRONMENT

    productFlavors {

        production {
            dimension = FLAVOR_DIMENSION_ENVIRONMENT
        }

        staging {
            dimension = FLAVOR_DIMENSION_ENVIRONMENT
        }
    }

    lintOptions {
        abortOnError false
    }

    applicationVariants.all { variant ->
        changeAPKName(variant)
    }
}

def changeAPKName(variant) {
    variant.outputs.all {output ->
        outputFileName "Java-Project-Template_" + getDate() + "-v" + variant.versionName + "-" + variant.versionCode + "-" + variant.name + ".apk"
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation project(':data')
    implementation project(':device')

    implementation 'com.android.support:appcompat-v7:' + $supportLibVersion
    implementation 'com.android.support:cardview-v7:' + $supportLibVersion
    implementation 'com.android.support.constraint:constraint-layout:' + $constraintLayoutVersion
    implementation 'com.android.support:recyclerview-v7:' + $supportLibVersion
    implementation 'com.android.support:support-core-utils:' + $supportLibVersion
    implementation 'com.android.support:design:' + $supportLibVersion
    implementation "com.android.support:customtabs:" + $supportLibVersion

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:' + $kotlin_version

    implementation 'com.android.support:multidex:' + $multiDexVersion

    implementation 'com.google.dagger:dagger:' + $daggerVersion
    kapt 'com.google.dagger:dagger-compiler:' + $daggerVersion

//    implementation 'com.google.firebase:firebase-core:' + $firebaseVersion
    // NOTE: Database will also include core library
    implementation 'com.google.firebase:firebase-database:' + $firebaseDatabaseVersion
    implementation 'com.google.firebase:firebase-auth:' + $firebaseAuthVersion
    implementation 'com.firebaseui:firebase-ui-auth:' + $firebaseUiAuthVersion
    implementation 'com.google.android.gms:play-services-auth:' + $playServicesAuthVersion

    implementation 'com.jakewharton:butterknife:' + $butterknifeVersion
    kapt 'com.jakewharton:butterknife-compiler:' + $butterknifeVersion

    implementation 'com.github.bumptech.glide:glide:' + $glideVersion
    implementation 'io.reactivex.rxjava2:rxandroid:' + $rxAndroidVersion

    debugImplementation 'com.facebook.stetho:stetho:' + $stethoVersion

    testImplementation 'junit:junit:' + $jUnitVersion

    androidTestImplementation 'com.android.support.test:runner:' + $testRunnerVersion
    androidTestImplementation 'com.android.support.test:rules:' + $testRulesVersion
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:' + $espressoCoreVersion

    implementation 'com.airbnb.android:lottie:' + $lottieVersion

    implementation 'com.journeyapps:zxing-android-embedded:' + $zxingEmbeddedVersion // TODO: Use '3.0.2' if this doesn't work
    implementation 'com.google.zxing:core:' + $zxingCoreVersion // TODO: Use '3.2.0' if this doesn't work

    implementation 'de.hdodenhof:circleimageview:' + $circleImageViewVersion
}

apply plugin: 'com.google.gms.google-services'